#include "../../include/error_free.h"
#include "../../include/dot_product.h"
#include "../../include/gen_random_number.h"
#include "../../include/compare.h"
#include "matplotlibcpp.h"

//   Timing cached reads:   37214 MB in  2.00 seconds = 18635.96 MB/sec
//   Timing buffered disk reads: 9180 MB in  3.00 seconds = 3060.00 MB/sec




using namespace std;
namespace plt = matplotlibcpp;

#define P 4000

int main() {
    int nb_gen = 5;
    double sum = 200; 
    double cond = 100;
    int sz = 7;
    class std::vector<double> Time(sz);
    class std::vector<mpfr_t> Error(sz);

    class std::vector<double> Time4(2);
    class std::vector<mpfr_t> Error4(2);
    class std::vector<double> Time8(2);
    class std::vector<mpfr_t> Error8(2);
    class std::vector<double> Time16(2);
    class std::vector<mpfr_t> Error16(2);

    for (unsigned int i; i<sz;i++){
        mpfr_init2(Error[i], P);
    }

    for (unsigned int i; i<2;i++){
        mpfr_init2(Error4[i], P);
        mpfr_init2(Error8[i], P);
        mpfr_init2(Error16[i], P);
        
    }


    // Time / Size
    int sz_time = 20;
    class std::vector<double> VSize(sz_time);

    class std::vector<double> Time_standard(sz_time);

    class std::vector<double> Time0_standard(sz_time);

     class std::vector<double> Time1_standard(sz_time);

    class std::vector<double> Time2_standard(sz_time);

     class std::vector<double> Time3_standard(sz_time);

    class std::vector<double> Time4_standard(sz_time);

    class std::vector<double> Time5_standard(sz_time);

    class std::vector<double> Time6_standard(sz_time);


    class std::vector<double> Time_par_standard(sz_time);

    class std::vector<double> Time0_par_standard(sz_time);

     class std::vector<double> Time1_par_standard(sz_time);

    class std::vector<double> Time2_par_standard(sz_time);

     class std::vector<double> Time3_par_standard(sz_time);

    class std::vector<double> Time4_par_standard(sz_time);

    class std::vector<double> Time5_par_standard(sz_time);

    class std::vector<double> Time6_par_standard(sz_time);


    class std::vector<double> Time_seq(sz_time);

    class std::vector<double> Time_cuda_par(sz_time);

    class std::vector<double> Time_cuda_seq(sz_time);


    class std::vector<double> Time_openmp1(sz_time);

    class std::vector<double> Time_openmp2(sz_time);


     class std::vector<double> Time_nofma_standard(sz_time);

    class std::vector<double> Time_nofma_par_standard(sz_time);
  
    class std::vector<double> Time_fma_standard(sz_time);

    class std::vector<double> Time_fma_par_standard(sz_time);


    class std::vector<double> Freq_avx(sz_time);

    class std::vector<double> Freq_ymm(sz_time);

    class std::vector<double> MaxTime(sz_time);

    class std::vector<double> Time_out1_standard(sz_time);
    class std::vector<double> Time_out1_par_standard(sz_time);

    class std::vector<double> Time_out2_standard(sz_time);
    class std::vector<double> Time_out2_par_standard(sz_time);

    class std::vector<double> Time_out3_standard(sz_time);
    class std::vector<double> Time_out3_par_standard(sz_time);

    class std::vector<double> Time_in1_standard(sz_time);
    class std::vector<double> Time_in1_par_standard(sz_time);

    class std::vector<double> Time_in2_standard(sz_time);
    class std::vector<double> Time_in2_par_standard(sz_time);

    class std::vector<double> Time_in3_standard(sz_time);
    class std::vector<double> Time_in3_par_standard(sz_time);


    class std::vector<double> Time_gcc1_standard(sz_time);
    class std::vector<double> Time_gcc1_par_standard(sz_time);

    class std::vector<double> Time_gcc2_standard(sz_time);
    class std::vector<double> Time_gcc2_par_standard(sz_time);

    class std::vector<double> Time_gcc3_standard(sz_time);
    class std::vector<double> Time_gcc3_par_standard(sz_time);

    class std::vector<double> Time_icc1_standard(sz_time);
    class std::vector<double> Time_icc1_par_standard(sz_time);

    class std::vector<double> Time_icc2_standard(sz_time);
    class std::vector<double> Time_icc2_par_standard(sz_time);

    class std::vector<double> Time_icc3_standard(sz_time);
    class std::vector<double> Time_icc3_par_standard(sz_time);

    

     VSize = {5000,10000,15000,20000,25000,30000,40000,50000,75000, 100000,200000,300000,400000,500000,625000,750000,875000,1000000,1500000,2000000};


///////////////////////////////////////// VECTO /////////////////////////////////////////  
//-------------- NO   -------------
//-------------- PAR + NO   -------------

Time_standard = 
 {13188.2000000000, 26249.6000000000, 43673.8000000000, 51973.2000000000, 67638.6000000000, 77931.0000000000, 104869.0000000000, 151379.4000000000, 199643.6000000000, 268642.4000000000, 606533.0000000000, 894497.0000000000, 1238894.8000000000, 1564213.6000000001, 1939512.8000000000, 2354525.2000000002, 2775869.0000000000, 3216869.6000000001, 4788707.7999999998, 6386369.4000000004};


Time_par_standard = 
 {6143.6000000000, 11786.6000000000, 16864.8000000000, 22172.8000000000, 27501.4000000000, 32681.2000000000, 43701.4000000000, 52666.6000000000, 77856.4000000000, 104407.4000000000, 205675.8000000000, 319202.6000000000, 435893.8000000000, 547253.4000000000, 682053.6000000000, 824051.8000000000, 963388.6000000000, 1098397.3999999999, 1662761.8000000000, 2194489.0000000000};
//-------------- PAR + VEC : -O3  -------------

Time0_standard = 
 {7283.2000000000, 14563.4000000000, 21955.0000000000, 29238.4000000000, 36209.6000000000, 44736.0000000000, 59283.8000000000, 74887.0000000000, 112763.4000000000, 145015.4000000000, 293346.4000000000, 437088.8000000000, 594520.6000000000, 741280.0000000000, 933527.2000000000, 1169918.8000000000, 1360824.8000000000, 1507623.3999999999, 2402650.3999999999, 3008530.6000000001};

Time0_par_standard = 
 {3181.4000000000, 3625.8000000000, 2939.0000000000, 4113.6000000000, 4131.8000000000, 4759.2000000000, 5934.4000000000, 7249.4000000000, 10263.8000000000, 13399.0000000000, 25758.4000000000, 36891.8000000000, 49459.6000000000, 62735.6000000000, 78443.8000000000, 97288.0000000000, 116428.8000000000, 136810.2000000000, 283338.6000000000, 537753.8000000000};
 // -------------- PAR + VEC  1 : -O3 -march=native------------- 

Time1_standard = 
 {4487.2000000000, 8916.6000000000, 13862.4000000000, 17998.4000000000, 22381.8000000000, 27112.0000000000, 36147.8000000000, 44769.4000000000, 67151.2000000000, 90312.8000000000, 179751.6000000000, 270968.0000000000, 361622.2000000000, 466834.0000000000, 599910.0000000000, 718287.4000000000, 818148.8000000000, 966230.8000000000, 1476782.6000000001, 1928861.2000000000};

Time1_par_standard = 
 {2924.0000000000, 2593.2000000000, 3271.8000000000, 3989.8000000000, 4295.4000000000, 4982.6000000000, 6157.0000000000, 7214.4000000000, 9881.6000000000, 13097.6000000000, 24958.4000000000, 36875.0000000000, 48800.0000000000, 62270.8000000000, 78233.2000000000, 95615.4000000000, 111606.4000000000, 146854.6000000000, 329815.0000000000, 606919.2000000000};
 // --------------- PAR + VEC 2 : -O3 -mavx512f-------------- 

Time2_standard = 
 {5282.4000000000, 10548.6000000000, 15903.4000000000, 21087.4000000000, 26364.4000000000, 31644.0000000000, 42170.2000000000, 52697.8000000000, 79110.0000000000, 105632.2000000000, 213491.6000000000, 316684.8000000000, 430448.0000000000, 540712.0000000000, 686130.4000000000, 825613.6000000000, 958834.6000000000, 1111307.3999999999, 1643912.3999999999, 2268664.2000000002};

Time2_par_standard = 
 {3687.2000000000, 2797.6000000000, 3474.4000000000, 4955.0000000000, 4208.8000000000, 4801.2000000000, 6044.0000000000, 7338.6000000000, 10335.0000000000, 13439.2000000000, 25533.6000000000, 37050.4000000000, 48900.6000000000, 60921.6000000000, 77952.0000000000, 93688.8000000000, 115344.2000000000, 143069.8000000000, 280156.4000000000, 591443.2000000000};
 // -------------- PAR + VEC  3 : -O3 -march=native -funsafe-math-optimizations ------------- 

Time3_standard = 
 {1146.0000000000, 2253.8000000000, 3425.6000000000, 4541.2000000000, 5587.6000000000, 6696.4000000000, 8935.8000000000, 11483.4000000000, 17357.4000000000, 24205.4000000000, 57061.6000000000, 85082.6000000000, 122449.8000000000, 156070.2000000000, 232585.0000000000, 325423.0000000000, 413047.0000000000, 518477.0000000000, 930063.6000000000, 1153781.6000000001};

Time3_par_standard = 
 {1346.2000000000, 1477.2000000000, 1722.6000000000, 2048.0000000000, 3084.2000000000, 2332.4000000000, 2766.0000000000, 3000.4000000000, 4348.6000000000, 5074.4000000000, 10027.4000000000, 14172.0000000000, 24161.2000000000, 37448.0000000000, 48358.0000000000, 61673.0000000000, 79002.2000000000, 105910.4000000000, 310510.4000000000, 535069.6000000000};
 // --------------- PAR + VEC 4 : -O3 -mavx512f -funsafe-math-optimizations-------------- 

Time4_standard = 
 {790.0000000000, 1282.8000000000, 2353.2000000000, 3543.4000000000, 4368.4000000000, 5210.0000000000, 6326.6000000000, 5739.8000000000, 13001.0000000000, 22213.0000000000, 54822.4000000000, 82395.8000000000, 128271.2000000000, 153618.2000000000, 214892.8000000000, 310577.8000000000, 377036.4000000000, 474199.2000000000, 1020723.2000000000, 1399976.0000000000};

Time4_par_standard = 
 {2167.2000000000, 1282.0000000000, 2301.4000000000, 1760.6000000000, 1858.4000000000, 4328.4000000000, 3587.8000000000, 2801.8000000000, 3985.0000000000, 4913.8000000000, 9642.6000000000, 14652.8000000000, 24896.0000000000, 37894.2000000000, 48871.8000000000, 59399.6000000000, 90535.0000000000, 120976.0000000000, 354918.6000000000, 599688.2000000000};




//-------------- PAR + NO   -------------

Time_standard = 
 {14031.4000000000, 27325.6000000000, 42448.8000000000, 54547.2000000000, 66824.6000000000, 82117.8000000000, 108403.0000000000, 135447.0000000000, 200949.6000000000, 271914.8000000000, 643209.8000000000, 927025.4000000000, 1272276.0000000000, 1628378.2000000000, 2032472.8000000000, 2355750.2000000002, 2794734.3999999999, 3183882.6000000001, 4725448.4000000004, 6431163.5999999996};


Time_par_standard = 
 {6136.4000000000, 11320.0000000000, 16208.8000000000, 22038.2000000000, 26756.6000000000, 30704.8000000000, 40825.0000000000, 53373.2000000000, 77633.0000000000, 103286.0000000000, 212285.4000000000, 305957.4000000000, 420907.0000000000, 529631.0000000000, 665493.8000000000, 798883.8000000000, 906818.0000000000, 1065222.2000000000, 1587171.6000000001, 2122094.3999999999};
//-------------- PAR + VEC : -O3  -------------

Time0_standard = 
 {7479.6000000000, 15159.4000000000, 22049.0000000000, 30528.4000000000, 36551.0000000000, 44799.6000000000, 59057.2000000000, 72962.4000000000, 111770.8000000000, 151109.0000000000, 296746.4000000000, 441310.2000000000, 594849.8000000000, 756191.2000000000, 941619.6000000000, 1187165.0000000000, 1321220.6000000001, 1521447.6000000001, 2305094.3999999999, 3090360.7999999998};

Time0_par_standard = 
 {1710.8000000000, 2388.4000000000, 3002.2000000000, 3586.8000000000, 4131.4000000000, 4706.8000000000, 5945.8000000000, 7300.4000000000, 10477.0000000000, 13189.0000000000, 25188.0000000000, 37421.6000000000, 50126.0000000000, 63207.6000000000, 78043.6000000000, 95055.8000000000, 115871.0000000000, 150869.4000000000, 377446.2000000000, 785031.4000000000};
 // -------------- PAR + VEC  1 : -O3 -march=native------------- 

Time1_standard = 
 {4725.0000000000, 9252.0000000000, 14064.6000000000, 18324.2000000000, 23470.8000000000, 28388.0000000000, 36653.0000000000, 44760.8000000000, 70315.0000000000, 91287.8000000000, 186836.0000000000, 267992.4000000000, 377496.0000000000, 462824.4000000000, 578936.8000000000, 723544.4000000000, 860373.2000000000, 973485.8000000000, 1447851.3999999999, 1945053.3999999999};

Time1_par_standard = 
 {1809.8000000000, 2521.2000000000, 3259.0000000000, 3634.6000000000, 4297.6000000000, 4824.2000000000, 6140.4000000000, 7170.8000000000, 10220.2000000000, 13224.6000000000, 25592.6000000000, 37957.6000000000, 49999.6000000000, 62054.8000000000, 78210.0000000000, 93823.4000000000, 139988.2000000000, 148872.4000000000, 376290.8000000000, 613587.6000000000};
 // --------------- PAR + VEC 2 : -O3 -mavx512f-------------- 

Time2_standard = 
 {5360.4000000000, 10756.0000000000, 15822.0000000000, 21396.0000000000, 26638.0000000000, 33006.0000000000, 44944.0000000000, 53914.2000000000, 80325.8000000000, 109156.8000000000, 214028.2000000000, 321481.4000000000, 436352.6000000000, 564909.6000000000, 697648.4000000000, 873909.0000000000, 972684.6000000000, 1157078.2000000000, 1700145.2000000000, 2251154.0000000000};

Time2_par_standard = 
 {2230.6000000000, 2688.4000000000, 3896.4000000000, 3587.0000000000, 4500.4000000000, 5223.6000000000, 6139.6000000000, 7239.2000000000, 10178.0000000000, 13461.0000000000, 25742.0000000000, 37895.2000000000, 52980.6000000000, 63150.4000000000, 77877.2000000000, 93259.6000000000, 115872.8000000000, 150343.0000000000, 331901.6000000000, 735492.2000000000};
 // -------------- PAR + VEC  3 : -O3 -march=native -funsafe-math-optimizations ------------- 

Time3_standard = 
 {1202.8000000000, 2306.2000000000, 3437.0000000000, 4600.4000000000, 5821.2000000000, 6882.8000000000, 9041.0000000000, 12038.4000000000, 17965.2000000000, 24600.4000000000, 58977.0000000000, 96124.4000000000, 124776.6000000000, 170263.8000000000, 204922.8000000000, 350943.6000000000, 501870.4000000000, 502128.6000000000, 891630.0000000000, 1306054.0000000000};

Time3_par_standard = 
 {1753.2000000000, 1484.2000000000, 1978.0000000000, 1921.0000000000, 2030.2000000000, 2310.8000000000, 2914.8000000000, 3062.4000000000, 4531.6000000000, 5085.6000000000, 10164.8000000000, 15690.6000000000, 27801.6000000000, 37344.2000000000, 47894.2000000000, 59652.4000000000, 75474.8000000000, 93732.4000000000, 304584.0000000000, 653210.8000000000};
 // --------------- PAR + VEC 4 : -O3 -mavx512f -funsafe-math-optimizations-------------- 

Time4_standard = 
 {789.2000000000, 1330.0000000000, 2534.8000000000, 3967.0000000000, 4449.8000000000, 5416.2000000000, 6408.4000000000, 5848.4000000000, 13518.2000000000, 21290.4000000000, 54851.2000000000, 80727.4000000000, 118474.8000000000, 151085.6000000000, 214331.6000000000, 338708.4000000000, 431075.2000000000, 529520.6000000000, 1152255.8000000000, 1569494.6000000001};

Time4_par_standard = 
 {1904.8000000000, 1491.2000000000, 1593.6000000000, 1774.2000000000, 1776.2000000000, 2074.2000000000, 2495.2000000000, 2800.4000000000, 3874.2000000000, 4893.0000000000, 9498.2000000000, 16996.2000000000, 25588.4000000000, 35979.2000000000, 46691.6000000000, 61653.8000000000, 91211.8000000000, 136864.6000000000, 352713.4000000000, 735586.8000000000};






///////////////////////////////////////// Cuda  /////////////////////////////////////////


 Time_cuda_par = { 12976.600000000000364,  11614.000000000000000,  11370.200000000000728,  11743.799999999999272,  11819.299999999999272,  11473.200000000000728,  11666.100000000000364,  12123.600000000000364,  12727.500000000000000,  13456.399999999999636,  20167.799999999999272,  27926.900000000001455,  33300.000000000000000,  38633.199999999997090,  45456.000000000000000,  52838.599999999998545,  59585.599999999998545,  66085.000000000000000,  94188.899999999994179,  122308.600000000005821 }; 


 Time_cuda_seq = {};





  ///////////////////////////////////////// Frequence //////////////////////////////////////////

   Freq_avx = 
 {1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.577637, 1.577637, 1.577637, 1.577637, 1.531250, 1.531250, 1.488281, 1.488281, 1.448730};
   
   Freq_ymm = {1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.571289, 1.571289, 1.571289, 1.571289, 1.571289, 1.525391, 1.525391, 1.482910, 1.482910, 1.524414, 1.481934};
   



   ///////////////////////////////////////// FMA /////////////////////////////////////////
  // -------------- NO FMA : -ffp-contract=off -O3 -march=native------------- 

Time_nofma_standard = 
 {4720.6000000000, 9470.6000000000, 13815.6000000000, 18927.8000000000, 22817.8000000000, 26864.2000000000, 36713.0000000000, 46262.4000000000, 68580.6000000000, 94757.2000000000, 189106.6000000000, 280640.2000000000, 384611.8000000000, 466255.2000000000, 596029.2000000000, 729540.6000000000, 864888.0000000000, 972769.4000000000, 1566801.2000000000, 1953532.2000000000};

Time_nofma_par_standard = 
 {1798.2000000000, 3212.8000000000, 3210.2000000000, 3636.0000000000, 4370.8000000000, 5404.0000000000, 6166.2000000000, 7279.2000000000, 10421.6000000000, 13471.0000000000, 25640.4000000000, 37848.0000000000, 50340.6000000000, 63708.2000000000, 77316.2000000000, 93813.8000000000, 136081.2000000000, 209978.2000000000, 360130.6000000000, 722906.0000000000};
 // --------------- FMA : -ffp-contract=off -O3 -march=native -------------- 

Time_fma_standard = 
 {4724.6000000000, 9298.8000000000, 13553.8000000000, 18172.6000000000, 23004.2000000000, 27123.2000000000, 37090.6000000000, 46299.0000000000, 67468.6000000000, 92104.4000000000, 183438.0000000000, 277181.4000000000, 380492.2000000000, 490012.4000000000, 610292.6000000000, 742976.8000000000, 840827.2000000000, 984468.2000000000, 1553775.3999999999, 1952569.3999999999};

Time_fma_par_standard = 
 {1854.6000000000, 2505.8000000000, 3066.2000000000, 3598.2000000000, 4160.6000000000, 4665.8000000000, 6093.0000000000, 7195.2000000000, 10757.2000000000, 13426.4000000000, 25600.4000000000, 37746.0000000000, 50385.2000000000, 62400.2000000000, 77750.4000000000, 94840.0000000000, 114324.2000000000, 160614.0000000000, 354069.6000000000, 631205.2000000000};

   
   



///////////////////////////////////////// OPEN MP /////////////////////////////////////////
//-------------- NO FLAGS  -------------

Time_out1_standard = 
 {13432.4000000000, 26980.2000000000, 41009.0000000000, 53990.4000000000, 67747.4000000000, 81594.2000000000, 107803.0000000000, 131212.2000000000, 210019.0000000000, 284826.8000000000, 629192.8000000000, 921910.4000000000, 1253831.0000000000, 1575611.3999999999, 1990450.8000000000, 2391392.0000000000, 2799882.0000000000, 3203124.0000000000, 4855692.0000000000, 6540334.0000000000};


Time_out1_par_standard = 
 {5834.4000000000, 11272.4000000000, 15808.4000000000, 21277.8000000000, 26083.4000000000, 32042.2000000000, 41849.6000000000, 51654.6000000000, 77666.6000000000, 103837.2000000000, 204355.0000000000, 313077.0000000000, 424800.0000000000, 527525.6000000000, 656570.0000000000, 797386.2000000000, 925516.2000000000, 1055863.2000000000, 1588073.8000000000, 2105269.6000000001};
 
 // --------------- -O3 -mavx512f -funsafe-math-optimizations-------------- 

Time_out2_standard = 
 {964.8000000000, 1909.6000000000, 2739.0000000000, 3603.4000000000, 4509.6000000000, 5295.0000000000, 8190.6000000000, 9194.2000000000, 14598.8000000000, 22028.4000000000, 58410.2000000000, 88429.0000000000, 112076.6000000000, 143430.2000000000, 305515.2000000000, 308228.4000000000, 424495.2000000000, 502837.4000000000, 1132996.3999999999, 1545486.6000000001};

Time_out2_par_standard = 
 {1516.4000000000, 1651.2000000000, 2116.4000000000, 3090.8000000000, 2043.8000000000, 3418.2000000000, 2502.6000000000, 2678.4000000000, 4762.0000000000, 5015.6000000000, 8084.8000000000, 13443.2000000000, 25549.2000000000, 38028.0000000000, 49840.0000000000, 63887.4000000000, 80251.2000000000, 107687.4000000000, 336788.0000000000, 682070.0000000000};
 
 // --------------- -O3 -march=native -funsafe-math-optimizations -------------- 

Time_out3_standard = 
 {1166.0000000000, 2320.6000000000, 3403.8000000000, 4659.0000000000, 5728.0000000000, 6853.8000000000, 16477.0000000000, 11677.6000000000, 17393.4000000000, 24027.4000000000, 53614.0000000000, 80995.8000000000, 144507.0000000000, 160333.6000000000, 225939.0000000000, 375790.8000000000, 426145.2000000000, 510551.0000000000, 936277.6000000000, 1260488.8000000000};

Time_out3_par_standard = 
 {1256.8000000000, 2251.0000000000, 1631.8000000000, 1817.6000000000, 2292.2000000000, 2538.2000000000, 2878.6000000000, 3393.8000000000, 4086.4000000000, 4999.2000000000, 7652.0000000000, 14080.8000000000, 24465.2000000000, 37174.6000000000, 49328.0000000000, 65324.8000000000, 87535.8000000000, 145931.4000000000, 323218.2000000000, 672564.4000000000};
 
 // --------------- VEC INSIDE + -------------- 

Time_in1_standard = 
 {13626.0000000000, 30958.0000000000, 40080.0000000000, 53494.8000000000, 67436.6000000000, 78652.2000000000, 104860.4000000000, 140591.4000000000, 206761.6000000000, 272826.8000000000, 632880.8000000000, 952345.0000000000, 1279685.0000000000, 1634647.6000000001, 2038414.2000000000, 2422113.2000000002, 2830987.3999999999, 3320030.6000000001, 4950206.2000000002, 6490818.0000000000};

Time_in1_par_standard = 
 {5674.2000000000, 10988.4000000000, 16341.0000000000, 21494.2000000000, 26392.4000000000, 30645.6000000000, 42078.0000000000, 51879.2000000000, 74342.8000000000, 101104.6000000000, 198356.6000000000, 307330.0000000000, 414039.2000000000, 530613.8000000000, 664566.2000000000, 796994.8000000000, 926562.6000000000, 1058570.2000000000, 1586941.2000000000, 2127647.7999999998};
 
  
 // --------------- VEC INSIDE + -O3 -mavx512f -funsafe-math-optimizations-------------- 

Time_in2_standard = 
 {4654.4000000000, 9353.6000000000, 13614.8000000000, 18590.4000000000, 23505.6000000000, 27743.4000000000, 36823.4000000000, 44955.4000000000, 68608.2000000000, 89950.8000000000, 186078.6000000000, 290020.0000000000, 379546.4000000000, 468862.2000000000, 619700.8000000000, 758124.6000000000, 868079.6000000000, 979246.6000000000, 1499860.8000000000, 1990784.3999999999};

Time_in2_par_standard = 
 {1696.0000000000, 2433.6000000000, 4546.6000000000, 3495.4000000000, 4209.0000000000, 4807.4000000000, 5982.0000000000, 7126.6000000000, 10369.4000000000, 13441.0000000000, 25584.4000000000, 37920.4000000000, 50161.6000000000, 62651.2000000000, 77819.0000000000, 94569.4000000000, 114499.4000000000, 146551.8000000000, 361671.8000000000, 714920.0000000000};

//-------------- VEC INSIDE + -O3 -march=native -funsafe-math-optimizations  -------------

Time_in3_standard = 
 {1186.6000000000, 2311.6000000000, 3500.8000000000, 4580.4000000000, 5773.6000000000, 6985.4000000000, 9184.0000000000, 12567.4000000000, 17207.2000000000, 24888.4000000000, 57363.2000000000, 84802.6000000000, 128569.0000000000, 159300.2000000000, 279921.0000000000, 351931.2000000000, 454123.4000000000, 545979.6000000000, 888570.0000000000, 1197837.8000000000};

Time_in3_par_standard = 
 {1298.2000000000, 1444.4000000000, 1687.8000000000, 1764.6000000000, 2382.0000000000, 2488.6000000000, 2644.0000000000, 3519.2000000000, 4171.0000000000, 4899.6000000000, 7616.6000000000, 15225.2000000000, 23024.8000000000, 36267.0000000000, 50847.4000000000, 61986.6000000000, 84410.0000000000, 141732.0000000000, 410312.4000000000, 595435.6000000000};

   

///////////////////////////////////////// ICC /////////////////////////////////////////
   
//-------------- GCC + NO   -------------

Time_gcc1_standard = 
 {13014.8000000000, 26769.8000000000, 40549.0000000000, 52383.2000000000, 65413.6000000000, 77982.6000000000, 104643.2000000000, 135146.0000000000, 196737.8000000000, 294058.4000000000, 619395.8000000000, 935442.0000000000, 1250273.0000000000, 1563068.6000000001, 1965425.8000000000, 2363046.2000000002, 2744706.6000000001, 3126517.6000000001, 4754926.4000000004, 6336956.0000000000};


Time_gcc1_par_standard = 
 {5958.2000000000, 11400.4000000000, 16457.8000000000, 21168.4000000000, 27094.2000000000, 30632.4000000000, 41232.6000000000, 53904.8000000000, 77675.0000000000, 105025.8000000000, 212628.4000000000, 318060.0000000000, 424169.4000000000, 521837.2000000000, 660562.0000000000, 796428.8000000000, 928560.2000000000, 1062961.2000000000, 1586117.0000000000, 2138983.3999999999};
//-------------- GCC + YMM : -O3 -march=native -funsafe-math-optimizations  -------------

Time_gcc2_standard = 
 {1133.2000000000, 2259.8000000000, 3360.6000000000, 4496.4000000000, 5581.8000000000, 6725.2000000000, 8918.8000000000, 11196.8000000000, 16734.0000000000, 23228.6000000000, 53214.6000000000, 81809.6000000000, 112329.4000000000, 147962.4000000000, 200560.4000000000, 265142.4000000000, 348200.4000000000, 434366.8000000000, 782312.6000000000, 1073944.6000000001};

Time_gcc2_par_standard = 
 {1913.2000000000, 1470.6000000000, 1737.2000000000, 3362.0000000000, 3945.0000000000, 4720.8000000000, 3029.2000000000, 3450.4000000000, 4646.2000000000, 5027.2000000000, 7660.6000000000, 14534.4000000000, 24231.0000000000, 37331.2000000000, 50259.0000000000, 61513.4000000000, 78292.2000000000, 110199.0000000000, 278752.8000000000, 499507.6000000000};
 // -------------- GCC + ZMM : -O3 -mavx512f -funsafe-math-optimizations------------- 

Time_gcc3_standard = 
 {775.0000000000, 1730.2000000000, 2593.0000000000, 3721.6000000000, 4382.2000000000, 5218.4000000000, 6275.2000000000, 9055.4000000000, 14542.6000000000, 22552.2000000000, 53785.8000000000, 83435.8000000000, 113457.6000000000, 145845.4000000000, 196536.2000000000, 271718.6000000000, 343700.4000000000, 437268.6000000000, 929064.4000000000, 1317595.3999999999};

Time_gcc3_par_standard = 
 {1866.6000000000, 1747.8000000000, 2643.2000000000, 2869.0000000000, 4414.0000000000, 3079.2000000000, 2306.0000000000, 6036.6000000000, 3993.6000000000, 5262.4000000000, 8279.2000000000, 14841.2000000000, 24045.4000000000, 35154.6000000000, 47622.2000000000, 59728.0000000000, 84615.6000000000, 108151.0000000000, 290324.4000000000, 533697.2000000000};
 // --------------- ICPX + NO -------------- 

Time_icc1_standard = 
 {2419.4000000000, 4905.8000000000, 7342.0000000000, 9788.8000000000, 12232.2000000000, 14676.0000000000, 19565.2000000000, 24458.6000000000, 36696.2000000000, 49101.4000000000, 96099.2000000000, 141181.0000000000, 188812.4000000000, 238288.0000000000, 308064.0000000000, 377537.2000000000, 454849.4000000000, 522564.8000000000, 847840.8000000000, 1205687.4000000001};

Time_icc1_par_standard = 
 {2003.8000000000, 2177.8000000000, 2463.8000000000, 2647.8000000000, 2874.2000000000, 3025.0000000000, 3402.0000000000, 3855.2000000000, 4860.6000000000, 5871.4000000000, 10035.8000000000, 14070.0000000000, 18220.4000000000, 23252.6000000000, 32012.0000000000, 44304.4000000000, 78313.2000000000, 77390.4000000000, 284342.8000000000, 508651.8000000000};
 // -------------- ICPX + YMM : -O3 -xCORE-AVX2 -vec ------------- 

Time_icc2_standard = 
 {352.0000000000, 681.6000000000, 1011.4000000000, 1302.0000000000, 1613.2000000000, 1932.0000000000, 2557.6000000000, 3186.6000000000, 4757.8000000000, 6313.8000000000, 12305.4000000000, 16727.6000000000, 22302.6000000000, 28016.0000000000, 34830.2000000000, 41790.8000000000, 48751.6000000000, 55727.4000000000, 84308.0000000000, 112427.6000000000};

Time_icc2_par_standard = 
 {12285.2000000000, 2265.0000000000, 2505.6000000000, 2716.4000000000, 3002.6000000000, 3197.4000000000, 3636.8000000000, 3983.6000000000, 5187.2000000000, 5770.6000000000, 7448.6000000000, 11883.0000000000, 14687.0000000000, 34311.6000000000, 30659.8000000000, 58949.0000000000, 56354.4000000000, 93409.6000000000, 318841.4000000000, 531947.2000000001};
 // --------------- ICPX + ZMM : -O3 -xCORE-AVX512 -qopt-zmm-usage=high -vec-------------- 

Time_icc3_standard = 
 {941.8000000000, 2366.0000000000, 3361.4000000000, 4009.6000000000, 4840.6000000000, 5790.2000000000, 7080.4000000000, 10484.0000000000, 15622.0000000000, 25671.2000000000, 61403.0000000000, 88680.6000000000, 116761.8000000000, 149808.2000000000, 209784.6000000000, 298841.2000000000, 351572.8000000000, 438790.4000000000, 941064.8000000000, 1355984.8000000000};

Time_icc3_par_standard = 
 {21039.4000000000, 2047.4000000000, 2209.6000000000, 2395.2000000000, 2677.2000000000, 2766.6000000000, 3152.4000000000, 3481.6000000000, 4333.2000000000, 5221.8000000000, 7380.0000000000, 22013.6000000000, 13917.2000000000, 32845.4000000000, 44773.6000000000, 72535.4000000000, 71483.6000000000, 93409.8000000000, 280309.2000000000, 502105.8000000000};



    // int i = 0;
    // vector<double>::iterator k;
    // for (k = VSize.begin(); k != VSize.end(); k++){  
    //     double qtt,MaxT;
    //     qtt = *k * 2 * 8 /1000000;
    //     MaxT = 19000;
    //     MaxTime[i] = MaxT;
    //     i +=1;
       
    // }

    // Log
    class std::vector<double> T1(2);
    class std::vector<double> T2(2);
    T1[0] = VSize[0];
    T1[1] = VSize[sz_time - 1];
    T2[0] = Time3_par_standard[0];
    T2[1] = Time3_par_standard[sz_time -1];
    // T2[0] = 1;
    // T2[1] = 2;
    plt::loglog(T1,T2,"w");



    // plt::plot(VSize,Time_standard,{{"color", "b"},{"label", "Without flags"}});

    // plt::plot(VSize,Time0_standard,{{"color", "g"},{"label", "-O3"}});

    // plt::plot(VSize,Time1_standard,{{"color", "y"},{"label", "-O3 -march=native"}});

    // plt::plot(VSize,Time2_standard,{{"color", "r"},{"label", "-O3 -mavx512f"}});

    // plt::plot(VSize,Time3_standard,{{"color", "y"},{"label", "-O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time4_standard,{{"color", "r"},{"label", "-O3 -mavx512f -funsafe-math-optimizations"}});
  
    // plt::plot(VSize,Time5_standard,{{"label", "-O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time6_standard,{{"label", "-O3 -mavx512f -funsafe-math-optimizations"}});


    // plt::plot(VSize,Time_par_standard,{{"label", "Without flags"}});

    // plt::plot(VSize,Time0_par_standard,{{"label", "-O3"}});

    // plt::plot(VSize,Time1_par_standard,{{"label", "-O3 -march=native"}});

    // plt::plot(VSize,Time2_par_standard,{{"label", "-O3 -mavx512f"}});

    // plt::plot(VSize,Time3_par_standard,{{"label", "-O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time4_par_standard,{{"label", "-O3 -mavx512f -funsafe-math-optimizations"}});


    // plt::plot(VSize,MaxTime,{{"color", "#FF00CD"},{"label", "Max Flow"}});    


    // plt::plot(VSize,Time_seq,{{"label", "CPU Sequential"}});





    ///////////////////////////////////////// CUDA /////////////////////////////////////////

    // plt::plot(VSize,Time_cuda_par,{{"label", "Cuda Parallel"}});

    // plt::plot(VSize,Time_cuda_seq,{{"label", "Cuda Sequential"}});







    ///////////////////////////////////////// FMA /////////////////////////////////////////

    // plt::plot(VSize,Time_nofma_standard,{{"label", "Standard dot product without FMA"}});

    // plt::plot(VSize,Time_nofma_par_standard,{{"label", "Parallel standard dot product without FMA"}});

    // plt::plot(VSize,Time_fma_standard,{{"label", "Standard dot product with FMA"}});

    // plt::plot(VSize,Time_fma_par_standard,{{"label", "Parallel standard dot product with FMA"}});









    ///////////////////////////////////////// OPEN MP /////////////////////////////////////////
  
    
    // plt::plot(VSize,Time_out1_standard,{{"label", "Sequential without flags"}});

    // plt::plot(VSize,Time_out1_par_standard,{{"label", "Parallel without flags"}});

    // plt::plot(VSize,Time_out2_standard,{{"label", "Sequential -O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_out2_par_standard,{{"label", "Parallel -O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_out3_standard,{{"label", "Parallel -O3 -mavx512f -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_out3_par_standard,{{"label", "Parallel -O3 -mavx512f -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_in1_standard,{{"label", "Sequential with vecto inside without flags"}});

    // plt::plot(VSize,Time_in1_par_standard,{{"label", "Parallel with vecto inside without flags"}});

    // plt::plot(VSize,Time_in2_standard,{{"label", "Sequential with vecto inside -O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_in2_par_standard,{{"label", "Parallel with vecto inside -O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_in3_standard,{{"label", "Sequential with vecto inside -O3 -mavx512f -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_in3_par_standard,{{"label", "Parallel with vecto inside -O3 -mavx512f -funsafe-math-optimizations"}});
    


    ///////////////////////////////////////// FREQUENCE /////////////////////////////////////////

    // plt::plot(VSize,Freq_ymm,{{"label", "Frequence with 256 bits ymm registres"}});

    // plt::plot(VSize,Freq_avx,{{"label", "Frequence with 512 bits zmm registres "}});
    



    ///////////////////////////////////////// ICC /////////////////////////////////////////

    // plt::plot(VSize,Time_gcc1_standard,{{"label", "Gcc sequential"}});
// 
    plt::plot(VSize,Time_gcc1_par_standard,{{"label", "Gcc parallel"}});

    // plt::plot(VSize,Time_gcc2_standard,{{"label", "Gcc sequential AVX2"}});

    plt::plot(VSize,Time_gcc2_par_standard,{{"label", "Gcc parallel AVX2"}});
// 
    // plt::plot(VSize,Time_gcc3_standard,{{"label", "Gcc sequential AVX512"}});

    plt::plot(VSize,Time_gcc3_par_standard,{{"label", "Gcc parallel AVX512"}});

    // plt::plot(VSize,Time_icc1_standard,{{"label", "Icc sequential"}});

    plt::plot(VSize,Time_icc1_par_standard,{{"label", "Icc parallel"}});

    // plt::plot(VSize,Time_icc2_standard,{{"label", "Icc sequential AVX2"}});

    plt::plot(VSize,Time_icc2_par_standard,{{"label", "Icc parallel AVX2"}});

    // plt::plot(VSize,Time_icc3_standard,{{"label", "Icc sequential AVX512"}});

    plt::plot(VSize,Time_icc3_par_standard,{{"label", "Icc parallel AVX512"}});


    ///////////////////////////////////////// ICC /////////////////////////////////////////

    // Caches
    std::vector<double> cachesL1 = {18000, 18000};
    std::vector<double> cachesL2 = {468750, 468750};
    std::vector<double> cachesL3 = {750000, 750000};
    double height = 1e7;
    std::vector<double> heights = {0,height};
    

    // Tracé des lignes verticales
    plt::plot(cachesL1,heights,{{"linestyle","--"},{"label", "L1d Cache"}});
    plt::plot(cachesL2,heights,{{"linestyle","--"},{"label", "L2 Cache"}});
    plt::plot(cachesL3,heights,{{"linestyle","--"},{"label", "L3 Cache"}});

    plt::title("Time of execution of different versions according to size");
    plt::xlabel("Size of vector");
    plt::ylabel("Time (in ns)");
    // plt::ylabel("Frequence (in GHz)");


    plt::legend();    
    plt::show();
    return 0;
}