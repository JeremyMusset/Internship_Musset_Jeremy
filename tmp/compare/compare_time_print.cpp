#include "../../include/error_free.h"
#include "../../include/dot_product.h"
#include "../../include/gen_random_number.h"
#include "../../include/compare.h"
#include "matplotlibcpp.h"

//   Timing cached reads:   37214 MB in  2.00 seconds = 18635.96 MB/sec
//   Timing buffered disk reads: 9180 MB in  3.00 seconds = 3060.00 MB/sec




using namespace std;
namespace plt = matplotlibcpp;

#define P 4000

int main() {
    int nb_gen = 5;
    double sum = 200; 
    double cond = 100;
    int sz = 7;
    class std::vector<double> Time(sz);
    class std::vector<mpfr_t> Error(sz);

    class std::vector<double> Time4(2);
    class std::vector<mpfr_t> Error4(2);
    class std::vector<double> Time8(2);
    class std::vector<mpfr_t> Error8(2);
    class std::vector<double> Time16(2);
    class std::vector<mpfr_t> Error16(2);

    for (unsigned int i; i<sz;i++){
        mpfr_init2(Error[i], P);
    }

    for (unsigned int i; i<2;i++){
        mpfr_init2(Error4[i], P);
        mpfr_init2(Error8[i], P);
        mpfr_init2(Error16[i], P);
        
    }


    // Time / Size
    int sz_time = 20;
    class std::vector<double> VSize(sz_time);

    class std::vector<double> Time_1_standard(sz_time);
    class std::vector<double> Time_2_standard(sz_time);
    class std::vector<double> Time_3_standard(sz_time);
    class std::vector<double> Time_4_standard(sz_time);
    class std::vector<double> Time_5_standard(sz_time);
    class std::vector<double> Time_6_standard(sz_time);

    class std::vector<double> Time_1_par_standard(sz_time);
    class std::vector<double> Time_2_par_standard(sz_time);
    class std::vector<double> Time_3_par_standard(sz_time);
    class std::vector<double> Time_4_par_standard(sz_time);
    class std::vector<double> Time_5_par_standard(sz_time);
    class std::vector<double> Time_6_par_standard(sz_time);

    class std::vector<double> Time_cuda_par(27);
    class std::vector<double> Time_cuda_seq(27);
    class std::vector<double> Time_cuda_blas(27);

        class std::vector<double> Time_cuda_par_t(27);
    class std::vector<double> Time_cuda_seq_t(27);
    class std::vector<double> Time_cuda_blas_t(27);


    class std::vector<double> Time_openmp1(sz_time);
    class std::vector<double> Time_openmp2(sz_time);


    class std::vector<double> Time_nofma_standard(sz_time);
    class std::vector<double> Time_nofma_par_standard(sz_time);
    class std::vector<double> Time_fma_standard(sz_time);
    class std::vector<double> Time_fma_par_standard(sz_time);


    class std::vector<double> Freq_avx(sz_time);
    class std::vector<double> Freq_ymm(sz_time);

    class std::vector<double> MaxTime(sz_time);

    class std::vector<double> Time_out1_standard(sz_time);
    class std::vector<double> Time_out1_par_standard(sz_time);

    class std::vector<double> Time_out2_standard(sz_time);
    class std::vector<double> Time_out2_par_standard(sz_time);

    class std::vector<double> Time_out3_standard(sz_time);
    class std::vector<double> Time_out3_par_standard(sz_time);

    class std::vector<double> Time_in1_standard(sz_time);
    class std::vector<double> Time_in1_par_standard(sz_time);

    class std::vector<double> Time_in2_standard(sz_time);
    class std::vector<double> Time_in2_par_standard(sz_time);

    class std::vector<double> Time_in3_standard(sz_time);
    class std::vector<double> Time_in3_par_standard(sz_time);


    class std::vector<double> Time_gcc1_standard(sz_time);
    class std::vector<double> Time_gcc1_par_standard(sz_time);

    class std::vector<double> Time_gcc2_standard(sz_time);
    class std::vector<double> Time_gcc2_par_standard(sz_time);

    class std::vector<double> Time_gcc3_standard(sz_time);
    class std::vector<double> Time_gcc3_par_standard(sz_time);

    class std::vector<double> Time_icc1_standard(sz_time);
    class std::vector<double> Time_icc1_par_standard(sz_time);

    class std::vector<double> Time_icc2_standard(sz_time);
    class std::vector<double> Time_icc2_par_standard(sz_time);

    class std::vector<double> Time_icc3_standard(sz_time);
    class std::vector<double> Time_icc3_par_standard(sz_time);

    class std::vector<double> Time_sycl_seq(sz_time);
    class std::vector<double> Time_sycl_par(sz_time);

    class std::vector<double> Time_sycl_seq_t(sz_time);
    class std::vector<double> Time_sycl_par_t(sz_time);

    

    VSize = {5000,10000,15000,20000,25000,30000,40000,50000,75000, 100000,200000,300000,400000,500000,625000,750000,875000,1000000,1500000,2000000};

//-------------- NO   -------------

Time_1_standard = 
 {14703.8000000000, 27137.2000000000, 40330.0000000000, 53819.8000000000, 67741.2000000000, 88178.6000000000, 106300.0000000000, 134062.8000000000, 199937.0000000000, 267621.4000000000, 567613.6000000000, 849457.6000000000, 1201407.3999999999, 1496888.0000000000, 1917972.6000000001, 2288213.7999999998, 2719963.6000000001, 3183183.0000000000, 4739735.7999999998, 6388890.2000000002};


Time_1_par_standard = 
 {6372.0000000000, 11292.4000000000, 16310.4000000000, 21349.6000000000, 27790.8000000000, 32529.8000000000, 43530.6000000000, 54159.8000000000, 79288.6000000000, 100351.6000000000, 209056.0000000000, 300335.0000000000, 417456.2000000000, 531001.0000000000, 664667.0000000000, 782792.6000000000, 912092.2000000000, 1047681.4000000000, 1754144.3999999999, 2197079.3999999999};
 
//-------------- VEC : -O3  -------------

Time_2_standard = 
 {7325.2000000000, 14741.8000000000, 21943.0000000000, 29513.6000000000, 36546.4000000000, 43850.0000000000, 58828.6000000000, 73405.6000000000, 111681.8000000000, 146544.8000000000, 293466.6000000000, 447124.2000000000, 598084.6000000000, 743885.6000000000, 953264.8000000000, 1133316.6000000001, 1311517.8000000000, 1520532.3999999999, 2276209.2000000002, 3042528.2000000002};

Time_2_par_standard = 
 {2327.8000000000, 2326.2000000000, 2941.8000000000, 3552.4000000000, 4181.6000000000, 4771.6000000000, 6005.8000000000, 7217.0000000000, 10300.2000000000, 13310.4000000000, 25616.4000000000, 37730.2000000000, 48906.0000000000, 61199.0000000000, 77164.0000000000, 95407.6000000000, 116394.2000000000, 142128.6000000000, 343823.0000000000, 533477.0000000000};
 
 // -------------- VEC  1 : -O3 -mavx2 -march=native------------- 

Time_3_standard = 
 {4571.2000000000, 9172.2000000000, 13677.6000000000, 18070.0000000000, 22909.2000000000, 27375.2000000000, 36479.0000000000, 45577.0000000000, 69028.2000000000, 90405.6000000000, 181747.6000000000, 274040.6000000000, 371108.0000000000, 467173.0000000000, 602467.8000000000, 726949.6000000000, 833065.0000000000, 956178.4000000000, 1467985.8000000000, 1959311.0000000000};

Time_3_par_standard = 
 {1711.8000000000, 2367.6000000000, 3316.0000000000, 3761.8000000000, 4335.0000000000, 4785.6000000000, 5863.4000000000, 7119.6000000000, 10238.2000000000, 12987.0000000000, 25277.6000000000, 37832.8000000000, 50092.0000000000, 62356.2000000000, 77900.2000000000, 93798.0000000000, 114158.4000000000, 138417.4000000000, 313954.8000000000, 552259.6000000000};
 
 // --------------- VEC 2 : -O3 -mavx512f-------------- 

Time_4_standard = 
 {5589.6000000000, 10648.8000000000, 15816.8000000000, 21089.8000000000, 26630.8000000000, 31791.6000000000, 42162.2000000000, 53730.4000000000, 79893.6000000000, 107591.0000000000, 218625.6000000000, 325592.8000000000, 429403.4000000000, 560426.4000000000, 697363.0000000000, 831396.4000000000, 964960.8000000000, 1119127.8000000000, 1690451.3999999999, 2264604.7999999998};

Time_4_par_standard = 
 {2369.0000000000, 2771.8000000000, 5272.2000000000, 3506.8000000000, 4116.2000000000, 4629.0000000000, 6001.6000000000, 7282.4000000000, 10333.2000000000, 13341.2000000000, 25736.8000000000, 37283.4000000000, 49463.4000000000, 61537.0000000000, 78582.4000000000, 93926.2000000000, 113125.0000000000, 164285.4000000000, 320066.8000000000, 556905.8000000000};
 
 // -------------- VEC  3 : -O3 -mavx2 -march=native -funsafe-math-optimizations------------- 

Time_5_standard = 
 {1150.8000000000, 2286.4000000000, 3489.4000000000, 4538.4000000000, 5584.0000000000, 6695.4000000000, 15487.0000000000, 11249.2000000000, 17150.2000000000, 24013.4000000000, 54085.2000000000, 84611.0000000000, 115428.4000000000, 193088.2000000000, 247950.6000000000, 316364.4000000000, 367754.4000000000, 508477.4000000000, 827614.8000000000, 1208655.0000000000};

Time_5_par_standard = 
 {1853.0000000000, 1487.8000000000, 1717.2000000000, 3307.6000000000, 4013.6000000000, 3598.2000000000, 2661.4000000000, 4525.0000000000, 4138.0000000000, 4853.4000000000, 9832.2000000000, 14461.0000000000, 25561.0000000000, 37235.6000000000, 49851.2000000000, 60518.4000000000, 82007.0000000000, 107428.4000000000, 291753.0000000000, 579960.2000000000};
 
 // --------------- VEC 4 : -O3 -mavx512f -funsafe-math-optimizations-------------- 

Time_6_standard = 
 {782.2000000000, 1341.8000000000, 2350.4000000000, 3590.4000000000, 4400.8000000000, 5247.2000000000, 6311.2000000000, 5799.2000000000, 12936.2000000000, 23023.0000000000, 55234.4000000000, 82049.8000000000, 125594.4000000000, 187752.0000000000, 242219.8000000000, 326476.8000000000, 442415.8000000000, 524038.0000000000, 1098301.3999999999, 1559279.3999999999};

Time_6_par_standard = 
 {1542.4000000000, 1714.2000000000, 1903.4000000000, 1967.8000000000, 1816.2000000000, 1996.2000000000, 2263.8000000000, 2873.8000000000, 3888.4000000000, 5042.8000000000, 9446.4000000000, 13683.2000000000, 25454.4000000000, 37825.6000000000, 49935.6000000000, 61853.0000000000, 78340.6000000000, 122784.0000000000, 325404.0000000000, 605107.2000000000};





///////////////////////////////////////// Cuda  /////////////////////////////////////////

std::vector<double> size_cuda (27);
size_cuda = {5000,10000,15000,20000,25000,30000,40000,50000,75000, 100000,200000,300000,400000,500000,625000,750000,875000,1000000,1500000,2000000,4000000,6000000,8000000,10000000,17500000,25000000,37500000};


 Time_cuda_par = { 12976.600000000000364,  11614.000000000000000,  11370.200000000000728,  11743.799999999999272,  11819.299999999999272,  11473.200000000000728,  11666.100000000000364,  12123.600000000000364,  12727.500000000000000,  13456.399999999999636,  20167.799999999999272,  27926.900000000001455,  33300.000000000000000,  38633.199999999997090,  45456.000000000000000,  52838.599999999998545,  59585.599999999998545,  66085.000000000000000,  94188.899999999994179,  122308.600000000005821 }; 


 Time_cuda_seq = {};


 Time_cuda_blas = { 15571.599999999998545,  12896.299999999999272,  12856.500000000000000,  13785.599999999998545,  14360.200000000000728,  14910.900000000001455,  14260.299999999999272,  16234.099999999998545,  13714.500000000000000,  19054.200000000000728,  17293.799999999999272,  25633.000000000000000,  30975.300000000002910,  33989.099999999998545,  39029.500000000000000,  47392.300000000002910,  54955.099999999998545,  60583.699999999997090,  70980.500000000000000,  108751.199999999997090 };




//Gbytes / s
        double qtt;
        for (int j=0;j<27 ; j++) {
            qtt = VSize[j] * 2 * 8 ;
            Time_cuda_par_t[j] = qtt / Time_cuda_par[j] ;
            Time_cuda_seq_t[j] = qtt / Time_cuda_seq[j] ;
            Time_cuda_blas_t[j] = qtt / Time_cuda_blas[j] ;
        }


  ///////////////////////////////////////// Frequence //////////////////////////////////////////

   Freq_avx = 
 {1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.577637, 1.577637, 1.577637, 1.577637, 1.531250, 1.531250, 1.488281, 1.488281, 1.448730};
   
   Freq_ymm = {1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.571289, 1.571289, 1.571289, 1.571289, 1.571289, 1.525391, 1.525391, 1.482910, 1.482910, 1.524414, 1.481934};
   



   ///////////////////////////////////////// FMA /////////////////////////////////////////
  // -------------- NO FMA : -ffp-contract=off -O3 -march=native------------- 

Time_nofma_standard = 
 {4720.6000000000, 9470.6000000000, 13815.6000000000, 18927.8000000000, 22817.8000000000, 26864.2000000000, 36713.0000000000, 46262.4000000000, 68580.6000000000, 94757.2000000000, 189106.6000000000, 280640.2000000000, 384611.8000000000, 466255.2000000000, 596029.2000000000, 729540.6000000000, 864888.0000000000, 972769.4000000000, 1566801.2000000000, 1953532.2000000000};

Time_nofma_par_standard = 
 {1798.2000000000, 3212.8000000000, 3210.2000000000, 3636.0000000000, 4370.8000000000, 5404.0000000000, 6166.2000000000, 7279.2000000000, 10421.6000000000, 13471.0000000000, 25640.4000000000, 37848.0000000000, 50340.6000000000, 63708.2000000000, 77316.2000000000, 93813.8000000000, 136081.2000000000, 209978.2000000000, 360130.6000000000, 722906.0000000000};
 // --------------- FMA : -ffp-contract=off -O3 -march=native -------------- 

Time_fma_standard = 
 {4724.6000000000, 9298.8000000000, 13553.8000000000, 18172.6000000000, 23004.2000000000, 27123.2000000000, 37090.6000000000, 46299.0000000000, 67468.6000000000, 92104.4000000000, 183438.0000000000, 277181.4000000000, 380492.2000000000, 490012.4000000000, 610292.6000000000, 742976.8000000000, 840827.2000000000, 984468.2000000000, 1553775.3999999999, 1952569.3999999999};

Time_fma_par_standard = 
 {1854.6000000000, 2505.8000000000, 3066.2000000000, 3598.2000000000, 4160.6000000000, 4665.8000000000, 6093.0000000000, 7195.2000000000, 10757.2000000000, 13426.4000000000, 25600.4000000000, 37746.0000000000, 50385.2000000000, 62400.2000000000, 77750.4000000000, 94840.0000000000, 114324.2000000000, 160614.0000000000, 354069.6000000000, 631205.2000000000};

   
   



///////////////////////////////////////// OPEN MP /////////////////////////////////////////
//-------------- NO FLAGS  -------------

Time_out1_standard = 
 {13432.4000000000, 26980.2000000000, 41009.0000000000, 53990.4000000000, 67747.4000000000, 81594.2000000000, 107803.0000000000, 131212.2000000000, 210019.0000000000, 284826.8000000000, 629192.8000000000, 921910.4000000000, 1253831.0000000000, 1575611.3999999999, 1990450.8000000000, 2391392.0000000000, 2799882.0000000000, 3203124.0000000000, 4855692.0000000000, 6540334.0000000000};


Time_out1_par_standard = 
{6212.2000000000, 11521.4000000000, 16433.2000000000, 21539.8000000000, 26733.4000000000, 31357.8000000000, 42067.4000000000, 49622.2000000000, 79718.6000000000, 103523.2000000000, 209872.8000000000, 312134.2000000000, 416873.0000000000, 517441.6000000000, 657741.0000000000, 780687.0000000000, 916666.4000000000, 1053161.0000000000, 1594299.6000000001, 2113637.0000000000};
 // --------------- -O3 -mavx512f -funsafe-math-optimizations-------------- 

Time_out2_standard = 
 {964.8000000000, 1909.6000000000, 2739.0000000000, 3603.4000000000, 4509.6000000000, 5295.0000000000, 8190.6000000000, 9194.2000000000, 14598.8000000000, 22028.4000000000, 58410.2000000000, 88429.0000000000, 112076.6000000000, 143430.2000000000, 305515.2000000000, 308228.4000000000, 424495.2000000000, 502837.4000000000, 1132996.3999999999, 1545486.6000000001};

Time_out2_par_standard = 
 {1516.4000000000, 1651.2000000000, 2116.4000000000, 3090.8000000000, 2043.8000000000, 3418.2000000000, 2502.6000000000, 2678.4000000000, 4762.0000000000, 5015.6000000000, 8084.8000000000, 13443.2000000000, 25549.2000000000, 38028.0000000000, 49840.0000000000, 63887.4000000000, 80251.2000000000, 107687.4000000000, 336788.0000000000, 682070.0000000000};
 
 // --------------- -O3 -march=native -funsafe-math-optimizations -------------- 

Time_out3_standard = 
 {1166.0000000000, 2320.6000000000, 3403.8000000000, 4659.0000000000, 5728.0000000000, 6853.8000000000, 16477.0000000000, 11677.6000000000, 17393.4000000000, 24027.4000000000, 53614.0000000000, 80995.8000000000, 144507.0000000000, 160333.6000000000, 225939.0000000000, 375790.8000000000, 426145.2000000000, 510551.0000000000, 936277.6000000000, 1260488.8000000000};

Time_out3_par_standard = 
 {1381.2000000000, 2458.8000000000, 2710.8000000000, 1730.0000000000, 2044.2000000000, 2290.4000000000, 2564.6000000000, 3028.8000000000, 4289.6000000000, 5034.4000000000, 7606.0000000000, 15100.4000000000, 24541.6000000000, 37440.0000000000, 49174.4000000000, 60858.8000000000, 87599.4000000000, 127604.6000000000, 280844.8000000000, 639027.8000000000};
 // --------------- VEC INSIDE + -------------- 

Time_in1_standard = 
 {13626.0000000000, 30958.0000000000, 40080.0000000000, 53494.8000000000, 67436.6000000000, 78652.2000000000, 104860.4000000000, 140591.4000000000, 206761.6000000000, 272826.8000000000, 632880.8000000000, 952345.0000000000, 1279685.0000000000, 1634647.6000000001, 2038414.2000000000, 2422113.2000000002, 2830987.3999999999, 3320030.6000000001, 4950206.2000000002, 6490818.0000000000};

Time_in1_par_standard = 
 {5674.2000000000, 10988.4000000000, 16341.0000000000, 21494.2000000000, 26392.4000000000, 30645.6000000000, 42078.0000000000, 51879.2000000000, 74342.8000000000, 101104.6000000000, 198356.6000000000, 307330.0000000000, 414039.2000000000, 530613.8000000000, 664566.2000000000, 796994.8000000000, 926562.6000000000, 1058570.2000000000, 1586941.2000000000, 2127647.7999999998};
 
  
 // --------------- VEC INSIDE + -O3 -mavx512f -funsafe-math-optimizations-------------- 

Time_in2_standard = 
 {4654.4000000000, 9353.6000000000, 13614.8000000000, 18590.4000000000, 23505.6000000000, 27743.4000000000, 36823.4000000000, 44955.4000000000, 68608.2000000000, 89950.8000000000, 186078.6000000000, 290020.0000000000, 379546.4000000000, 468862.2000000000, 619700.8000000000, 758124.6000000000, 868079.6000000000, 979246.6000000000, 1499860.8000000000, 1990784.3999999999};

Time_in2_par_standard = 
 {1696.0000000000, 2433.6000000000, 4546.6000000000, 3495.4000000000, 4209.0000000000, 4807.4000000000, 5982.0000000000, 7126.6000000000, 10369.4000000000, 13441.0000000000, 25584.4000000000, 37920.4000000000, 50161.6000000000, 62651.2000000000, 77819.0000000000, 94569.4000000000, 114499.4000000000, 146551.8000000000, 361671.8000000000, 714920.0000000000};

//-------------- VEC INSIDE + -O3 -march=native -funsafe-math-optimizations  -------------

Time_in3_standard = 
 {1186.6000000000, 2311.6000000000, 3500.8000000000, 4580.4000000000, 5773.6000000000, 6985.4000000000, 9184.0000000000, 12567.4000000000, 17207.2000000000, 24888.4000000000, 57363.2000000000, 84802.6000000000, 128569.0000000000, 159300.2000000000, 279921.0000000000, 351931.2000000000, 454123.4000000000, 545979.6000000000, 888570.0000000000, 1197837.8000000000};


Time_in3_par_standard = 
 {1688.0000000000, 3692.6000000000, 2892.0000000000, 3620.4000000000, 4140.8000000000, 4748.0000000000, 5766.0000000000, 7008.4000000000, 10361.2000000000, 13237.2000000000, 25069.4000000000, 37203.6000000000, 49385.8000000000, 62419.0000000000, 78430.6000000000, 96155.2000000000, 116551.2000000000, 140320.4000000000, 286579.2000000000, 699840.6000000000};
   

///////////////////////////////////////// ICC /////////////////////////////////////////
   
//-------------- GCC + NO   -------------

Time_gcc1_standard = 
 {13014.8000000000, 26769.8000000000, 40549.0000000000, 52383.2000000000, 65413.6000000000, 77982.6000000000, 104643.2000000000, 135146.0000000000, 196737.8000000000, 294058.4000000000, 619395.8000000000, 935442.0000000000, 1250273.0000000000, 1563068.6000000001, 1965425.8000000000, 2363046.2000000002, 2744706.6000000001, 3126517.6000000001, 4754926.4000000004, 6336956.0000000000};


Time_gcc1_par_standard = 
 {5958.2000000000, 11400.4000000000, 16457.8000000000, 21168.4000000000, 27094.2000000000, 30632.4000000000, 41232.6000000000, 53904.8000000000, 77675.0000000000, 105025.8000000000, 212628.4000000000, 318060.0000000000, 424169.4000000000, 521837.2000000000, 660562.0000000000, 796428.8000000000, 928560.2000000000, 1062961.2000000000, 1586117.0000000000, 2138983.3999999999};
//-------------- GCC + YMM : -O3 -march=native -funsafe-math-optimizations  -------------

Time_gcc2_standard = 
 {1133.2000000000, 2259.8000000000, 3360.6000000000, 4496.4000000000, 5581.8000000000, 6725.2000000000, 8918.8000000000, 11196.8000000000, 16734.0000000000, 23228.6000000000, 53214.6000000000, 81809.6000000000, 112329.4000000000, 147962.4000000000, 200560.4000000000, 265142.4000000000, 348200.4000000000, 434366.8000000000, 782312.6000000000, 1073944.6000000001};

Time_gcc2_par_standard = 
 {1913.2000000000, 1470.6000000000, 1737.2000000000, 3362.0000000000, 3945.0000000000, 4720.8000000000, 3029.2000000000, 3450.4000000000, 4646.2000000000, 5027.2000000000, 7660.6000000000, 14534.4000000000, 24231.0000000000, 37331.2000000000, 50259.0000000000, 61513.4000000000, 78292.2000000000, 110199.0000000000, 278752.8000000000, 499507.6000000000};
 // -------------- GCC + ZMM : -O3 -mavx512f -funsafe-math-optimizations------------- 

Time_gcc3_standard = 
 {775.0000000000, 1730.2000000000, 2593.0000000000, 3721.6000000000, 4382.2000000000, 5218.4000000000, 6275.2000000000, 9055.4000000000, 14542.6000000000, 22552.2000000000, 53785.8000000000, 83435.8000000000, 113457.6000000000, 145845.4000000000, 196536.2000000000, 271718.6000000000, 343700.4000000000, 437268.6000000000, 929064.4000000000, 1317595.3999999999};

Time_gcc3_par_standard = 
 {1866.6000000000, 1747.8000000000, 2643.2000000000, 2869.0000000000, 4414.0000000000, 3079.2000000000, 2306.0000000000, 6036.6000000000, 3993.6000000000, 5262.4000000000, 8279.2000000000, 14841.2000000000, 24045.4000000000, 35154.6000000000, 47622.2000000000, 59728.0000000000, 84615.6000000000, 108151.0000000000, 290324.4000000000, 533697.2000000000};
 // --------------- ICPX + NO -------------- 

Time_icc1_standard = 
 {2419.4000000000, 4905.8000000000, 7342.0000000000, 9788.8000000000, 12232.2000000000, 14676.0000000000, 19565.2000000000, 24458.6000000000, 36696.2000000000, 49101.4000000000, 96099.2000000000, 141181.0000000000, 188812.4000000000, 238288.0000000000, 308064.0000000000, 377537.2000000000, 454849.4000000000, 522564.8000000000, 847840.8000000000, 1205687.4000000001};

Time_icc1_par_standard = 
 {2003.8000000000, 2177.8000000000, 2463.8000000000, 2647.8000000000, 2874.2000000000, 3025.0000000000, 3402.0000000000, 3855.2000000000, 4860.6000000000, 5871.4000000000, 10035.8000000000, 14070.0000000000, 18220.4000000000, 23252.6000000000, 32012.0000000000, 44304.4000000000, 78313.2000000000, 77390.4000000000, 284342.8000000000, 508651.8000000000};
 // -------------- ICPX + YMM : -O3 -xCORE-AVX2 -vec ------------- 

Time_icc2_standard = 
 {352.0000000000, 681.6000000000, 1011.4000000000, 1302.0000000000, 1613.2000000000, 1932.0000000000, 2557.6000000000, 3186.6000000000, 4757.8000000000, 6313.8000000000, 12305.4000000000, 16727.6000000000, 22302.6000000000, 28016.0000000000, 34830.2000000000, 41790.8000000000, 48751.6000000000, 55727.4000000000, 84308.0000000000, 112427.6000000000};

Time_icc2_par_standard = 
 {12285.2000000000, 2265.0000000000, 2505.6000000000, 2716.4000000000, 3002.6000000000, 3197.4000000000, 3636.8000000000, 3983.6000000000, 5187.2000000000, 5770.6000000000, 7448.6000000000, 11883.0000000000, 14687.0000000000, 34311.6000000000, 30659.8000000000, 58949.0000000000, 56354.4000000000, 93409.6000000000, 318841.4000000000, 531947.2000000001};
 // --------------- ICPX + ZMM : -O3 -xCORE-AVX512 -qopt-zmm-usage=high -vec-------------- 

Time_icc3_standard = 
 {941.8000000000, 2366.0000000000, 3361.4000000000, 4009.6000000000, 4840.6000000000, 5790.2000000000, 7080.4000000000, 10484.0000000000, 15622.0000000000, 25671.2000000000, 61403.0000000000, 88680.6000000000, 116761.8000000000, 149808.2000000000, 209784.6000000000, 298841.2000000000, 351572.8000000000, 438790.4000000000, 941064.8000000000, 1355984.8000000000};

Time_icc3_par_standard = 
 {21039.4000000000, 2047.4000000000, 2209.6000000000, 2395.2000000000, 2677.2000000000, 2766.6000000000, 3152.4000000000, 3481.6000000000, 4333.2000000000, 5221.8000000000, 7380.0000000000, 22013.6000000000, 13917.2000000000, 32845.4000000000, 44773.6000000000, 72535.4000000000, 71483.6000000000, 93409.8000000000, 280309.2000000000, 502105.8000000000};

///////////////////////////////////////// Sycl /////////////////////////////////////////

Time_sycl_par = 
 {40292.7000000000, 41778.7000000000, 43563.9000000000, 44660.4000000000, 47433.0000000000, 47549.9000000000, 49251.4000000000, 52878.3000000000, 59200.7000000000, 68077.1000000000, 95753.5000000000, 130727.1000000000, 166454.2000000000, 191877.2000000000, 254953.1000000000, 422616.5000000000, 556035.0000000000, 750448.1000000001, 1430876.8000000000, 2014002.3000000000};


Time_sycl_seq = 
 {43107.0000000000, 54809.9000000000, 66267.3000000000, 68951.9000000000, 79634.6000000000, 92136.0000000000, 113345.3000000000, 133599.5000000000, 164950.9000000000, 203922.5000000000, 349626.9000000000, 502938.1000000000, 646442.7000000001, 814616.2000000001, 1099201.7000000000, 1369094.3000000000, 1720728.0000000000, 2053563.6000000001, 3092014.6000000001, 4291009.2000000002};
  //Gbytes / s
        for (int j=0;j<27 ; j++) {
            qtt = VSize[j] * 2 * 8 ;
            Time_sycl_par_t[j] = qtt / Time_sycl_par[j] ;
            Time_sycl_seq_t[j] = qtt / Time_sycl_seq[j] ;
        }
  
  
  
  
  
  
    // int i = 0;
    // vector<double>::iterator k;
    // for (k = VSize.begin(); k != VSize.end(); k++){  
    //     double qtt,MaxT;
    //     qtt = *k * 2 * 8 /1000000;
    //     MaxT = 19000;
    //     MaxTime[i] = MaxT;
    //     i +=1;
       
    // }

    // Log
    class std::vector<double> T1(2);
    class std::vector<double> T2(2);
    T1[0] = VSize[0];
    T1[1] = VSize[sz_time - 1];
    T2[0] = Time_sycl_par[0];
    T2[1] = Time_sycl_par[sz_time -1];
    // T2[0] = 1;
    // T2[1] = 2;
    plt::loglog(T1,T2,"w");



    plt::plot(VSize,Time_1_standard,{{"color", "b"},{"label", "Serial"}});

    // plt::plot(VSize,Time_2_standard,{{"color", "g"},{"label", "SSE"}});

    plt::plot(VSize,Time_3_standard,{{"label", "Serial + AVX2"}});

    // plt::plot(VSize,Time_4_standard,{{"label", "AVX512"}});

    // plt::plot(VSize,Time_5_standard,{{"label", "AVX2 + unsafe math optimizations"}});

    // plt::plot(VSize,Time_6_standard,{{"label", "AVX512 + unsafe math optimizations"}});


    plt::plot(VSize,Time_1_par_standard,{{"label", "Parallel"}});

    // plt::plot(VSize,Time_2_par_standard,{{"color", "g"},{"label", "SSE"}});

    plt::plot(VSize,Time_3_par_standard,{{"label", "Parallel + AVX2"}});

    // plt::plot(VSize,Time_4_par_standard,{{"color", "r"},{"label", "AVX512"}});

    // plt::plot(VSize,Time_5_par_standard,{{"label", "AVX2 + unsafe math optimizations"}});

    // plt::plot(VSize,Time_6_par_standard,{{"color", "y"},{"label", "AVX2 + unsafe math optimizations"}});


    // plt::plot(VSize,MaxTime,{{"color", "#FF00CD"},{"label", "Max Flow"}});    


    // plt::plot(VSize,Time_seq,{{"label", "CPU Sequential"}});





    ///////////////////////////////////////// CUDA /////////////////////////////////////////

    // plt::plot(VSize,Time_cuda_par,{{"label", "Cuda Parallel"}});

    // plt::plot(VSize,Time_cuda_seq_t,{{"label", "Cuda Sequential"}});

    // plt::plot(VSize,Time_cuda_blas,{{"label", "Cublas"}});







    ///////////////////////////////////////// FMA /////////////////////////////////////////

    // plt::plot(VSize,Time_nofma_standard,{{"label", "Standard dot product without FMA"}});

    // plt::plot(VSize,Time_nofma_par_standard,{{"label", "Parallel standard dot product without FMA"}});

    // plt::plot(VSize,Time_fma_standard,{{"label", "Standard dot product with FMA"}});

    // plt::plot(VSize,Time_fma_par_standard,{{"label", "Parallel standard dot product with FMA"}});









    ///////////////////////////////////////// OPEN MP /////////////////////////////////////////
  
    
    // plt::plot(VSize,Time_out1_standard,{{"label", "Sequential"}});

    // plt::plot(VSize,Time_out1_par_standard,{{"label", "Parallel without vecto"}});

    // plt::plot(VSize,Time_out2_standard,{{"label", "Sequential + AVX2"}});

    // plt::plot(VSize,Time_out2_par_standard,{{"label", "Parallel with AVX2 on gcc"}});

    // plt::plot(VSize,Time_out3_standard,{{"label", "Seq -O3 -mavx512f -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_out3_par_standard,{{"label", "Parallel with AVX2 on gcc"}});

    // plt::plot(VSize,Time_in1_standard,{{"label", "Sequential with vecto inside without flags"}});

    // plt::plot(VSize,Time_in1_par_standard,{{"label", "Parallel with AVX2 inside"}});

    // plt::plot(VSize,Time_in2_standard,{{"label", "Sequential with vecto inside -O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time_in2_par_standard,{{"label", "Parallel with vecto inside + AVX2 on gcc"}});

    // plt::plot(VSize,Time_in3_standard,{{"label", "Sequential with vecto inside -O3 -mavx512f -funsafe-math-optimizations"}});
// 
    // plt::plot(VSize,Time_in3_par_standard,{{"label", "Parallel with AVX2 inside"}});
    


    ///////////////////////////////////////// FREQUENCE /////////////////////////////////////////

    // plt::plot(VSize,Freq_ymm,{{"label", "Frequence with 256 bits ymm registres"}});

    // plt::plot(VSize,Freq_avx,{{"label", "Frequence with 512 bits zmm registres "}});
    



    ///////////////////////////////////////// ICC /////////////////////////////////////////

    // plt::plot(VSize,Time_gcc1_standard,{{"label", "Gcc serial"}});
// 
    // plt::plot(VSize,Time_gcc1_par_standard,{{"label", "Gcc Parallel"}});

    // plt::plot(VSize,Time_gcc2_standard,{{"label", "Gcc AVX2"}});

    // plt::plot(VSize,Time_gcc2_par_standard,{{"label", "Gcc parallel AVX2"}});
// 
    // plt::plot(VSize,Time_gcc3_standard,{{"label", "Gcc AVX512"}});

    // plt::plot(VSize,Time_gcc3_par_standard,{{"label", "Gcc parallel AVX512"}});

    // plt::plot(VSize,Time_icc1_standard,{{"label", "Icc serial"}});

    // plt::plot(VSize,Time_icc1_par_standard,{{"label", "Icc parallel"}});

    // plt::plot(VSize,Time_icc2_standard,{{"label", "Icc AVX2"}});

    // plt::plot(VSize,Time_icc2_par_standard,{{"label", "Icc parallel AVX2"}});

    // plt::plot(VSize,Time_icc3_standard,{{"label", "Icc AVX512"}});

    // plt::plot(VSize,Time_icc3_par_standard,{{"label", "Icc parallel AVX512"}});


    ///////////////////////////////////////// ICC /////////////////////////////////////////








    ///////////////////////////////////////// Sycl /////////////////////////////////////////

    // plt::plot(VSize,Time_sycl_seq,{{"label", "Serial"}});

    // plt::plot(VSize,Time_sycl_par,{{"label", "Parallel"}});

    // plt::plot(VSize,Time_sycl_seq_t,{{"label", "Serial"}});

    // plt::plot(VSize,Time_sycl_par_t,{{"label", "Parallel (12 threads)"}});


    // Caches
    std::vector<double> cachesL1 = {18000, 18000};
    std::vector<double> cachesL2 = {468750, 468750};
    std::vector<double> cachesL3 = {750000, 750000};
    double height = 45;
    std::vector<double> heights = {0,height};

    std::vector<double> cache_cuda = {187500, 187500};
    double height2 = 130000;
    std::vector<double> heights2 = {0,height2};
    

     

    // Tracé des lignes verticales
    // plt::plot(cachesL1,heights,{{"linestyle","--"},{"label", "L1d Cache"}});
    // plt::plot(cachesL2,heights,{{"linestyle","--"},{"label", "L2 Cache"}});
    // plt::plot(cachesL3,heights,{{"linestyle","--"},{"label", "L3 Cache"}});
    // plt::plot(cache_cuda,heights2,{{"linestyle","--"},{"label", "Cache"}});

    

    // plt::title("Throughput of different sycl versions according to size");
     plt::title("Time of different sycl versions according to size");
    plt::xlabel("Size of vector");
    // plt::ylabel("Throughput (in GBytes/s)");
    plt::ylabel("Time (in ns)");


    plt::legend();    
    plt::show();
    return 0;
}