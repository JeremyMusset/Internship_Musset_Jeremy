#include "../../include/error_free.h"
#include "../../include/dot_product.h"
#include "../../include/gen_random_number.h"
#include "../../include/compare.h"
#include "matplotlibcpp.h"

//   Timing cached reads:   37214 MB in  2.00 seconds = 18635.96 MB/sec
//   Timing buffered disk reads: 9180 MB in  3.00 seconds = 3060.00 MB/sec




using namespace std;
namespace plt = matplotlibcpp;

#define P 4000

int main() {
    int nb_gen = 5;
    double sum = 200; 
    double cond = 100;
    int sz = 7;
    class std::vector<double> Time(sz);
    class std::vector<mpfr_t> Error(sz);

    class std::vector<double> Time4(2);
    class std::vector<mpfr_t> Error4(2);
    class std::vector<double> Time8(2);
    class std::vector<mpfr_t> Error8(2);
    class std::vector<double> Time16(2);
    class std::vector<mpfr_t> Error16(2);

    for (unsigned int i; i<sz;i++){
        mpfr_init2(Error[i], P);
    }

    for (unsigned int i; i<2;i++){
        mpfr_init2(Error4[i], P);
        mpfr_init2(Error8[i], P);
        mpfr_init2(Error16[i], P);
        
    }


    // Time / Size
    int sz_time = 20;
    class std::vector<double> VSize(sz_time);

    class std::vector<double> Time_standard(sz_time);

    class std::vector<double> Time0_standard(sz_time);

     class std::vector<double> Time1_standard(sz_time);

    class std::vector<double> Time2_standard(sz_time);

     class std::vector<double> Time3_standard(sz_time);

    class std::vector<double> Time4_standard(sz_time);

    class std::vector<double> Time5_standard(sz_time);

    class std::vector<double> Time6_standard(sz_time);

    class std::vector<double> Time_seq(sz_time);

    class std::vector<double> Time_cuda_par(sz_time);

    class std::vector<double> Time_cuda_seq(sz_time);

    class std::vector<double> Time_openmp1(sz_time);

    class std::vector<double> Time_openmp2(sz_time);

     class std::vector<double> Timenofma0_standard(sz_time);

    class std::vector<double> Timenofma_standard(sz_time);

    class std::vector<double> Timenofma0_par_standard(sz_time);

    class std::vector<double> Timenofma_par_standard(sz_time);

    class std::vector<double> Timefma0_standard(sz_time);

    class std::vector<double> Timefma_standard(sz_time);

    class std::vector<double> Timefma0_par_standard(sz_time);

    class std::vector<double> Timefma_par_standard(sz_time);

    class std::vector<double> Freq_avx(sz_time);

    class std::vector<double> Freq_ymm(sz_time);

    class std::vector<double> MaxTime(sz_time);


     VSize = {5000,10000,15000,20000,25000,30000,40000,50000,75000, 100000,200000,300000,400000,500000,625000,750000,875000,1000000,1500000,2000000};
    
//-------------- NO   -------------

Time_standard = 
 {13318.8000000000, 25996.4000000000, 40563.4000000000, 54152.0000000000, 67639.8000000000, 81442.0000000000, 108099.2000000000, 135128.8000000000, 212482.6000000000, 274590.6000000000, 586842.0000000000, 940303.8000000000, 1263972.6000000001, 1584289.2000000000, 1979382.2000000000, 2371831.0000000000, 2775547.3999999999, 3161422.3999999999, 4759335.0000000000, 6346299.5999999996};

//-------------- VEC : -O3  -------------

Time0_standard = 
 {7257.0000000000, 14491.6000000000, 21777.6000000000, 29102.6000000000, 36207.4000000000, 43537.2000000000, 57978.2000000000, 72403.6000000000, 109148.2000000000, 145450.2000000000, 290162.6000000000, 441652.4000000000, 595064.4000000000, 746851.0000000000, 938861.4000000000, 1117360.8000000000, 1293145.3999999999, 1491835.8000000000, 2233881.0000000000, 2975566.6000000001};
 // -------------- VEC  1 : -O3 -march=native------------- 

Time1_standard = 
 {4490.0000000000, 8913.2000000000, 13366.0000000000, 17826.4000000000, 22486.4000000000, 26741.2000000000, 35651.2000000000, 44556.6000000000, 66905.2000000000, 89668.4000000000, 180291.8000000000, 273023.0000000000, 374319.8000000000, 465019.6000000000, 580148.6000000000, 696264.6000000000, 814952.2000000000, 928694.4000000000, 1396466.8000000000, 1869371.6000000001};
 // --------------- VEC 2 : -O3 -mavx512f-------------- 

Time2_standard = 
 {5311.8000000000, 10549.4000000000, 15816.4000000000, 21101.0000000000, 26492.2000000000, 31643.2000000000, 42784.2000000000, 52715.4000000000, 79313.6000000000, 105658.2000000000, 211056.6000000000, 322824.0000000000, 437705.8000000000, 547700.8000000000, 683052.0000000000, 822112.2000000000, 954664.0000000000, 1094131.0000000000, 1691256.0000000000, 2185872.6000000001};
 // -------------- VEC  1 : -O3 -march=skylake-avx512------------- 

Time3_standard = 
 {4508.0000000000, 8913.2000000000, 13367.6000000000, 17905.0000000000, 22384.0000000000, 26741.0000000000, 35650.0000000000, 44552.4000000000, 66845.2000000000, 89722.8000000000, 178285.6000000000, 269552.4000000000, 370582.4000000000, 464642.4000000000, 579266.8000000000, 696791.4000000000, 809983.8000000000, 928652.0000000000, 1397039.6000000001, 1869928.3999999999};
 // --------------- VEC 4 : -O3 -march=skylake-avx512 -funsafe-math-optimizations-------------- 

Time4_standard = 
 {1131.6000000000, 2245.8000000000, 3358.4000000000, 4476.8000000000, 5717.0000000000, 6695.4000000000, 9043.2000000000, 11149.6000000000, 16802.8000000000, 23215.0000000000, 56269.6000000000, 88504.4000000000, 120367.4000000000, 153653.0000000000, 208113.2000000000, 279386.2000000000, 367152.2000000000, 446025.0000000000, 785551.6000000000, 1123737.6000000001};
 // -------------- VEC  5 : -O3 -march=native -funsafe-math-optimizations------------- 

Time5_standard = 
 {5956.8000000000, 10596.8000000000, 15317.4000000000, 20864.2000000000, 24822.2000000000, 30686.4000000000, 41437.6000000000, 50661.2000000000, 73745.2000000000, 96602.2000000000, 193195.2000000000, 289573.8000000000, 395836.4000000000, 503824.2000000000, 632065.2000000000, 744570.8000000000, 878937.4000000000, 1012603.6000000000, 1517091.8000000000, 2035514.6000000001};
 // --------------- VEC 6 : -O3 -mavx512f -funsafe-math-optimizations  -------------- 

Time6_standard = 
 {1743.6000000000, 2230.2000000000, 2891.8000000000, 3505.4000000000, 4076.8000000000, 4655.2000000000, 5846.6000000000, 7066.6000000000, 10109.8000000000, 13027.4000000000, 24941.4000000000, 36865.6000000000, 48803.2000000000, 60765.0000000000, 76436.6000000000, 92394.0000000000, 110996.8000000000, 135664.2000000000, 274095.2000000000, 470910.6000000000};



// Cuda 


 Time_cuda_par = { 12976.600000000000364,  11614.000000000000000,  11370.200000000000728,  11743.799999999999272,  11819.299999999999272,  11473.200000000000728,  11666.100000000000364,  12123.600000000000364,  12727.500000000000000,  13456.399999999999636,  20167.799999999999272,  27926.900000000001455,  33300.000000000000000,  38633.199999999997090,  45456.000000000000000,  52838.599999999998545,  59585.599999999998545,  66085.000000000000000,  94188.899999999994179,  122308.600000000005821 }; 


 Time_cuda_seq = {};


// OpenMP

Time_openmp1 = 
 {5665.8000000000, 10534.6000000000, 15920.6000000000, 20928.0000000000, 25656.8000000000, 30527.4000000000, 40688.2000000000, 50498.8000000000, 73684.2000000000, 96023.0000000000, 195555.2000000000, 290034.8000000000, 397594.6000000000, 499090.6000000000, 630723.2000000000, 758001.4000000000, 884462.4000000000, 1012802.4000000000, 1501403.2000000000, 1982212.0000000000};
 // --------------- VEC : INSIDE + -O3 -mavx512f -funsafe-math-optimizations -------------- 

Time_openmp2 =  
 {2334.0000000000, 2284.8000000000, 4679.8000000000, 3567.2000000000, 4275.4000000000, 4860.4000000000, 5937.6000000000, 7162.6000000000, 10313.6000000000, 13353.2000000000, 25577.6000000000, 37752.0000000000, 50094.2000000000, 62323.8000000000, 77652.6000000000, 94806.6000000000, 112046.8000000000, 137155.6000000000, 279373.0000000000, 476700.8000000000};


   // Frequence

   Freq_avx = 
 {1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.628418, 1.577637, 1.577637, 1.577637, 1.577637, 1.531250, 1.531250, 1.488281, 1.488281, 1.448730};
   
   Freq_ymm = {1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.621094, 1.571289, 1.571289, 1.571289, 1.571289, 1.571289, 1.525391, 1.525391, 1.482910, 1.482910, 1.524414, 1.481934};
   
   // FMA 
   // -------------- NO VEC FMA : ------------- 
   Timenofma_standard = 
 {13374.0000000000, 28731.4000000000, 40244.6000000000, 55434.4000000000, 69367.8000000000, 80942.6000000000, 107844.0000000000, 130507.6000000000, 195308.6000000000, 265960.4000000000, 599824.8000000000, 921161.4000000000, 1271401.0000000000, 1539696.8000000000, 1965366.2000000000, 2342471.7999999998, 2715374.3999999999, 3219161.2000000002, 4764259.7999999998, 6432752.5999999996};

Timenofma0_par_standard = 
 {6954.8000000000, 10859.2000000000, 16688.2000000000, 21034.0000000000, 26556.2000000000, 30412.0000000000, 41713.4000000000, 50501.6000000000, 78974.6000000000, 100398.6000000000, 197101.0000000000, 303060.0000000000, 417642.2000000000, 524383.0000000000, 654806.0000000000, 781402.2000000000, 905312.6000000000, 1056613.2000000000, 1585717.0000000000, 2104213.6000000001};
 // --------------- VEC 4 : -O3 -mavx512f -funsafe-math-optimizations -------------- 

Timenofma_standard = 
 {797.6000000000, 1273.0000000000, 2596.4000000000, 3649.2000000000, 4461.0000000000, 5300.6000000000, 6275.0000000000, 5718.4000000000, 12855.2000000000, 21841.6000000000, 54390.8000000000, 82011.8000000000, 111355.8000000000, 172449.0000000000, 233496.6000000000, 331179.6000000000, 367521.2000000000, 444057.8000000000, 990730.2000000000, 1433262.8000000000};

Timenofma_par_standard = 
 {1509.4000000000, 2370.8000000000, 1631.2000000000, 2004.4000000000, 1839.4000000000, 2003.0000000000, 2142.6000000000, 2865.8000000000, 3860.0000000000, 4820.6000000000, 9417.0000000000, 13797.2000000000, 25593.6000000000, 37785.2000000000, 50274.2000000000, 61453.0000000000, 73827.0000000000, 102914.8000000000, 326562.8000000000, 579057.2000000000};
 // -------------- NO VEC FMA : ------------- 

Timefma0_standard = 
 {16809.6000000000, 34084.4000000000, 52248.6000000000, 69370.0000000000, 96198.0000000000, 101023.4000000000, 135261.4000000000, 167876.4000000000, 251863.2000000000, 334417.0000000000, 668328.0000000000, 1012609.2000000000, 1343307.8000000000, 1702122.6000000001, 2121747.0000000000, 2537137.0000000000, 2969202.3999999999, 3475981.7999999998, 5169736.0000000000, 7008770.0000000000};

Timefma0_par_standard = 
 {6168.4000000000, 11348.8000000000, 17224.2000000000, 22596.0000000000, 27730.6000000000, 33869.2000000000, 44931.4000000000, 56113.8000000000, 81978.6000000000, 111079.4000000000, 217655.8000000000, 328360.4000000000, 444125.2000000000, 566115.8000000000, 712505.4000000000, 859339.0000000000, 990018.4000000000, 1137794.6000000001, 1693012.6000000001, 2265363.3999999999};
 // --------------- VEC FMA : -O3 -mavx512f -funsafe-math-optimizations  -------------- 

Timefma_standard = 
 {4546.0000000000, 8953.0000000000, 13449.2000000000, 18074.4000000000, 23133.2000000000, 27756.0000000000, 36486.6000000000, 44961.8000000000, 68941.0000000000, 92161.4000000000, 181531.6000000000, 271810.4000000000, 366921.2000000000, 473153.4000000000, 590897.0000000000, 705699.2000000000, 826716.8000000000, 948030.6000000000, 1455660.8000000000, 1946667.2000000000};

Timefma_par_standard = 
 {1801.0000000000, 2417.8000000000, 3090.8000000000, 3814.4000000000, 4307.4000000000, 4830.6000000000, 6021.4000000000, 7250.0000000000, 10118.4000000000, 13000.0000000000, 25307.2000000000, 37507.4000000000, 50127.8000000000, 62298.8000000000, 77410.6000000000, 92685.8000000000, 118228.0000000000, 157819.8000000000, 304374.8000000000, 651891.2000000000};

   
   
   
   
   
   
    // int i = 0;
    // vector<double>::iterator k;
    // for (k = VSize.begin(); k != VSize.end(); k++){  
    //     double qtt,MaxT;
    //     qtt = *k * 2 * 8 /1000000;
    //     MaxT = 19000;
    //     MaxTime[i] = MaxT;
    //     i +=1;
       
    // }

    // Log
    class std::vector<double> T1(2);
    class std::vector<double> T2(2);
    T1[0] = VSize[0];
    T1[1] = VSize[sz_time - 1];
    T2[0] = Time_standard[0];
    T2[1] = Time_standard[sz_time -1];
    // T2[0] = 1;
    // T2[1] = 2;
    plt::loglog(T1,T2,"w");



    // plt::plot(VSize,Time_standard,{{"color", "b"},{"label", "Without flags"}});

    // plt::plot(VSize,Time0_standard,{{"color", "g"},{"label", "-O3"}});

    // plt::plot(VSize,Time1_standard,{{"color", "y"},{"label", "-O3 -march=native"}});

    // plt::plot(VSize,Time2_standard,{{"color", "r"},{"label", "-O3 -mavx512f"}});

    // plt::plot(VSize,Time5_standard,{{"label", "-O3 -march=native -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time6_standard,{{"label", "-O3 -mavx512f -funsafe-math-optimizations"}});

    //  plt::plot(VSize,Time5_standard,{{"label", "Parallel openmp without vectorisation inside -O3 -mavx512f -funsafe-math-optimizations"}});

    // plt::plot(VSize,Time6_standard,{{"label", "-Ofast -march=native -funsafe-math-optimizations -ffast-math "}});

    // plt::plot(VSize,MaxTime,{{"color", "#FF00CD"},{"label", "Max Flow"}});    

    // plt::plot(VSize,Time_seq,{{"label", "CPU Sequential"}});

    plt::plot(VSize,Time_cuda_par,{{"label", "Cuda Parallel"}});

    plt::plot(VSize,Time_cuda_seq,{{"label", "Cuda Sequential"}});

    // plt::plot(VSize,Time_openmp1,{{"label", "Parallel openmp with vectorisation inside without flags"}});

    // plt::plot(VSize,Time_openmp2,{{"label", "Parallel openmp with vectorisation inside -O3 -mavx512f -funsafe-math-optimizations"}});

    // plt::plot(VSize,Freq_ymm,{{"label", "Frequence with 256 bits ymm registres"}});

    // plt::plot(VSize,Freq_avx,{{"label", "Frequence with 512 bits zmm registres "}});
    

    plt::title("Time of execution of cuda versions according to size");
    plt::xlabel("Size of vector");
    plt::ylabel("Time (in ns)");
    // plt::ylabel("Frequence (in GHz)");


    plt::legend();    
    plt::show();
    return 0;
}